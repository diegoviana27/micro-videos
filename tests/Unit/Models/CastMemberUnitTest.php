<?php

namespace Tests\Unit\Models;

use App\Models\CastMember;
use App\Models\Traits\Uuid;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

# Classe específica                 - vendor/bin/phpunit tests/Unit/CategoryUnitTest.php
# Classe específico em um arquivo   - vendor/bin/phpunit --filter testIfUseTraits tests/Unit/CategoryUnitTest.php
# Método específico em uma classe   - vendor/bin/phpunit --filter CategoryUnitTest::testIfUseTraits

class CastMemberUnitTest extends TestCase
{

    private $castMember;

    protected  function  setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->castMember = new CastMember();
    }

    public function testFillableAttribute()
    {
        $filllable = ['name', 'type'];
        $this->assertEquals($filllable,
            $this->castMember->getFillable());
    }

    public function testDatesAttribute(){
        $dates = ['deleted_at', 'created_at', 'updated_at'];
        foreach ($dates as $date) {
            $this->assertContains($date, $this->castMember->getDates());
        }
        $this->assertCount(count($dates), $this->castMember->getDates());
    }

    public function testIfUseTraits(){
        $traits = [
            SoftDeletes::class,
            Uuid::class
        ];
        $castMemberTraits = array_keys(class_uses(CastMember::class));
        $this->assertEquals($traits, $castMemberTraits );
    }

    public function testCastsAtribute()
    {
        $casts = ['id' => 'string', 'type' => 'integer'];
        $this->assertEquals($casts,  $this->castMember->getCasts());
    }

    public function testIncrementingAtribute()
    {
        $this->assertFalse($this->castMember->incrementing);
    }
}
